
builder.CreateFile("xlsx");

var defaultFontSize = 11;
var defaultFontColorBlack = Api.CreateColorFromRGB(0, 0, 0);

var inputData = ${inputData};

var oWorksheet = Api.GetActiveSheet();

var currentRowIndex = 1;
var currentColIndex = 1;


function toColumnName(num) {
    for (var res = '', a = 1, b = 26; (num -= a) >= 0; a = b, b *= 26) {
        res = String.fromCharCode(parseInt((num % b) / a) + 65) + res;
    }
    return res;
}

function customizeWorksheet() {
    oWorksheet.SetName(inputData.resources.sheetName);

    oWorksheet.SetColumnWidth(inputData.data.keys.length - 1, 20);
    oWorksheet.SetColumnWidth(inputData.data.keys.length - 2, 20);
}

function prepareData(startColIndex, startRowIndex) {
    var colors = {
        mainBgColor: Api.CreateColorFromRGB(inputData.themeColors.mainBgColor[0], inputData.themeColors.mainBgColor[1], inputData.themeColors.mainBgColor[2]),
        lightBgColor: Api.CreateColorFromRGB(inputData.themeColors.lightBgColor[0], inputData.themeColors.lightBgColor[1], inputData.themeColors.lightBgColor[2]),
        mainFontColor: Api.CreateColorFromRGB(inputData.themeColors.mainFontColor[0], inputData.themeColors.mainFontColor[1], inputData.themeColors.mainFontColor[2])
    };

    var kA = [];
    for (var i = 0; i < inputData.data.keys.length; i++){
        kA.push({ "value": inputData.data.keys[i], "bold": true, "fontColor": defaultFontColorBlack, valign: "center",});
    }
    var dataTable = [
        {
            height: 19.5,
            dataArray: kA
        }
    ];

    for (var i = 0; i < inputData.data.values.length; i++){
        var rowValues = []
        for (var j = 0; j < inputData.data.values[i].length; j++){
            rowValues.push({ "value": inputData.data.values[i][j].value, "url": inputData.data.values[i][j].url, "fontSize": (defaultFontSize + 1), valign: "center", "format": inputData.data.values[i][j].format });
        }
        dataTable.push({ height: 19.5, dataArray: rowValues });
    }

    return dataTable;
}

function writeCell(position, data) {
    if (data == null) {
        return;
    }

    var sRange = oWorksheet.GetRange(position);

    if (data.format) {
        sRange.SetNumberFormat(data.format);
    }

    if (data.url) {
        oWorksheet.SetHyperlink(position, data.url, "", data.value);
    } else {
        if (data.value != null) {
            sRange.SetValue(data.value);
        }
    }

    sRange.SetFontSize(data.fontSize || defaultFontSize);
    sRange.SetFontColor(data.fontColor || defaultFontColorBlack);
    sRange.SetBold(data.bold || false);
    sRange.SetAlignHorizontal(data.halign || "left");
    sRange.SetAlignVertical(data.valign || "bottom");

    if (data.bgColor) {
        sRange.SetFillColor(data.bgColor);
    }

}

function writeTable(table) {
    for (var i = 0; i < table.length; i++)
    {
        var row = table[i];

        oWorksheet.SetRowHeight((currentRowIndex - 1), row.height);

        var range = toColumnName(currentColIndex) + currentRowIndex + ":";

        for (var j = 0; j < row.dataArray.length; j++)
        {
            var data = row.dataArray[j];

            var position = toColumnName(currentColIndex) + currentRowIndex;

            writeCell(position, data);

            currentColIndex++;
        }

        range += toColumnName(currentColIndex - 1) + currentRowIndex;

        var sRange = oWorksheet.GetRange(range);

        currentRowIndex++;
        currentColIndex = 1;
    }
}

customizeWorksheet();

var dataTable = prepareData(currentColIndex, currentRowIndex);

var formattedTableRange = toColumnName(currentColIndex) + (currentRowIndex) + ":" + toColumnName(dataTable[0].dataArray.length) + (currentRowIndex + dataTable.length - 3);

writeTable(dataTable);

oWorksheet.GetRange(toColumnName(1) + 1).Select();

builder.SaveFile("xlsx", "${tempFileName}");
builder.CloseFile();