server:
  host: ${SERVER_ADDRESS:127.0.0.1}
  port: ${SERVER_PORT:8080}
  servlet:
    session:
      tracking-modes: cookie

spring:
  application:
    name: ASC.Identity
  profiles:
    active: ${PROFILE:dev}
  datasource:
    url: jdbc:mysql://${JDBC_URL:127.0.0.1:33060}/${JDBC_DATABASE:docspace}
    username: ${JDBC_USER_NAME:root}
    password: ${JDBC_PASSWORD:my-secret-pw}
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
  rabbitmq:
    host: ${RABBIT_HOST:127.0.0.1}
    port: ${RABBIT_PORT:5672}
    username: ${RABBIT_USER_NAME:guest}
    password: ${RABBIT_PASSWORD:guest}
    listener:
      simple:
        retry:
          enabled: true
          initial-interval: 1000
          max-attempts: 3
          max-interval: 3000
          multiplier: 3.0

application:
  server:
    url: http://onlyoffice-oauth-authorization:8080

docspace:
  server:
    url: http://${DOCSPACE_ADDRESS:127.0.0.1}

messaging:
  rabbitmq:
    configuration:
      authorization:
        exchange: authorization.exchange
        queue: authorization.queue
        routing: authorization.routing
        deadExchange: authorization.dead.exchange
        deadQueue: authorization.dead.queue
        deadRouting: authorization.dead.routing
      consent:
        exchange: consent.exchange
        queue: consent.queue
        routing: consent.routing
        deadExchange: consent.dead.exchange
        deadQueue: consent.dead.queue
        deadRouting: consent.dead.routing

resilience4j:
  bulkhead:
    instances:
      docspaceBulkhead:
        maxConcurrentCalls: 100
        maxWaitDuration: 400ms
  ratelimiter:
    configs:
      default:
        limitRefreshPeriod: 1s
        limitForPeriod: 1000
        timeoutDuration: 500ms
        registerHealthIndicator: true
        eventConsumerBufferSize: 100
    instances:
      getRateLimiter:
        baseConfig: default
      mutateRateLimiter:
        baseConfig: default
  timelimiter:
    instances:
      mutateTimeLimiter:
        timeoutDuration: 2s
      readTimeLimiter:
        timeoutDuration: 1s

management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    env:
      post:
        enabled: true

logging:
  level:
    root: INFO
    org:
      hibernate:
        stat: DEBUG
        SQL: DEBUG