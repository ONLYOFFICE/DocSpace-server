server:
  shutdown: graceful
  socket:
    host: ${SOCKET_SERVER_HOST:127.0.0.1}
    port: ${SOCKET_SERVER_PORT:8585}
  host: ${SERVER_HOST:127.0.0.1}
  port: ${SERVER_PORT:9090}
  error:
    include-message: always
    include-binding-errors: always
    include-stacktrace: always
    include-exception: false
    whitelabel:
      enabled: false

application:
  security:
    cipherSecret: ${CIPHER_SECRET:secret}
  scopes:
    -
      name: accounts:read
      group: accounts
      type: read
    -
      name: accounts:write
      group: accounts
      type: write
    -
      name: rooms:read
      group: rooms
      type: read
    -
      name: rooms:write
      group: rooms
      type: write
    -
      name: accounts.self:read
      group: profiles
      type: read
    -
      name: accounts.self:write
      group: profiles
      type: write
    -
      name: files:read
      group: files
      type: read
    -
      name: files:write
      group: files
      type: write
    -
      name: openid
      group: openid
      type: openid

springdoc:
  api-docs:
    path: /api/2.0/oauth/info

spring:
  lifecycle:
    timeout-per-shutdown-phase: 1m
  cloud:
    loadbalancer:
      ribbon:
        enable: false
    ratelimiter:
      redis:
        addresses: ${REDIS_ADDRESSES:localhost:6379}
        limiters:
          - name: "identityFetchClient"
            limit: 5
            refresh: 1
          - name: "identityMutateClient"
            limit: 2
            refresh: 1
          - name: "identityFetchScope"
            limit: 5
            refresh: 1
    messaging:
      rabbitmq:
        queues:
          audit:
            exchange: asc_identity_audit_exchange
            queue: asc_identity_audit_queue
            routing: asc_identity_audit_routing
            deadExchange: asc_identity_audit_dlx
            deadQueue: asc_identity_audit_dlq
            deadRouting: asc_identity_audit_dlr
          authorization:
            exchange: asc_identity_authorization_exchange
            queue: asc_identity_authorization_queue
            routing: asc_identity_authorization_routing
            deadExchange: asc_identity_authorization_dlx
            deadQueue: asc_identity_authorization_dlq
            deadRouting: asc_identity_authorization_dlr
          client:
            exchange: asc_identity_client_exchange
            queue: asc_identity_client_queue
            routing: asc_identity_client_routing
            deadExchange: asc_identity_client_dlx
            deadQueue: asc_identity_client_dlq
            deadRouting: asc_identity_client_dlr
          consent:
            exchange: asc_identity_consent_exchange
            queue: asc_identity_consent_queue
            routing: asc_identity_consent_routing
            deadExchange: asc_identity_consent_dlx
            deadQueue: asc_identity_consent_dlq
            deadRouting: asc_identity_consent_dlr
          socket:
            exchange: asc_identity_socket_exchange
            queue: ${random.uuid}
            routing: asc_identity_socket_routing
            deadExchange: asc_identity_socket_dlx
            deadQueue: asc_identity_socket_dlq
            deadRouting: asc_identity_socket_dlr
            nonDurable: true
            autoDelete: true
            fanOut: true
    openfeign:
      circuitbreaker:
        enabled: true
        alphanumeric-ids: true
      client:
        config:
          default:
            connectTimeout: 1500
            readTimeout: 3000
    discovery:
      client:
        composite-indicator:
          enabled: false
  flyway:
    enabled: true
    baselineOnMigrate: true
    url: jdbc:mysql://${JDBC_URL:localhost:3306}/${JDBC_DATABASE:docspace}
    user: ${JDBC_USER_NAME:dev}
    password: ${JDBC_PASSWORD:dev}
    schemas: ${JDBC_DATABASE:docspace}
    sql-migration-prefix: V
    repeatable-sql-migration-prefix: R
    sql-migration-separator: __
    sql-migration-suffixes: .sql
    locations: classpath:migration/mysql
  application:
    name: ASC.Identity.Authorization.API
  profiles:
    active: ${PROFILE:dev}
  jpa:
    show-sql: false
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        generate_statistics: false
        jdbc:
          time_zone: UTC
          batch_size: 100
        order_inserts: true
        dialect: org.hibernate.dialect.MySQLDialect
  datasource:
    url: jdbc:mysql://${JDBC_URL:localhost:3306}/${JDBC_DATABASE:docspace}
    username: ${JDBC_USER_NAME:dev}
    password: ${JDBC_PASSWORD:dev}
    driver-class-name: com.mysql.cj.jdbc.Driver
  rabbitmq:
    host: ${RABBIT_HOST:localhost}
    port: ${RABBIT_PORT:5672}
    username: ${RABBIT_USER_NAME:guest}
    password: ${RABBIT_PASSWORD:guest}
    listener:
      simple:
        retry:
          enabled: true
          initial-interval: 1000
          max-attempts: 3
          max-interval: 3000
          multiplier: 3.0

resilience4j:
  circuitbreaker:
    instances:
      asc:
        registerHealthIndicator: true
        eventConsumerBufferSize: 10
        failureRateThreshold: 50
        minimumNumberOfCalls: 5
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 5s
        permittedNumberOfCallsInHalfOpenState: 3
        slidingWindowSize: 10
        slidingWindowType: COUNT_BASED
  retry:
    instances:
      getClientRetryRateLimiter:
        maxRetryAttempts: 2
        waitDuration: 1s
      batchClientRetryRateLimiter:
        maxRetryAttempts: 2
        waitDuration: 1s
      regenerateClientSecretRetryRateLimiter:
        maxRetryAttempts: 2
        waitDuration: 1s
      updateClientRetryRateLimiter:
        maxRetryAttempts: 4
        waitDuration: 1s
      getScopesRetryRateLimiter:
        maxRetryAttempts: 2
        waitDuration: 1s
  ratelimiter:
    configs:
      default:
        limitRefreshPeriod: 1000ms
        limitForPeriod: 1000
        timeoutDuration: 500ms
        registerHealthIndicator: true
        eventConsumerBufferSize: 100
    instances:
      batchClientRateLimiter:
        baseConfig: default
        limitForPeriod: 500
      getClientRateLimiter:
        baseConfig: default
      regenerateClientSecretRateLimiter:
        baseConfig: default
        limitForPeriod: 15
      updateClientRateLimiter:
        baseConfig: default
        limitForPeriod: 15
      getScopesRateLimiter:
        baseConfig: default

management:
  health:
    livenessState:
      enabled: true
    readinessState:
      enabled: true
    diskspace:
      enabled: false
    refresh:
      enabled: false
  endpoints:
    web:
      base-path:
      path-mapping:
        health: /health
      exposure:
        include: 'health'
  endpoint:
    health:
      probes:
        enabled: true
      show-details: 'always'
    env:
      post:
        enabled: true

logging:
  config: classpath:log4j2.xml
  level:
    root: INFO
    org:
      hibernate:
        stat: DEBUG
        SQL: DEBUG
---
spring:
  config:
    activate:
      on-profile: dev
logging:
  config: classpath:log4j2-dev.xml